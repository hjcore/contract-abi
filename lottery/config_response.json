{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ConfigResponse",
  "type": "object",
  "required": [
    "admin",
    "block_time_play",
    "combination_len",
    "every_block_time_play",
    "jackpot_percent",
    "lottery_counter",
    "lottery_cw20_addr",
    "lottery_worker_fee",
    "oracle_contract_addr",
    "register_price",
    "safe_lock",
    "total_collect",
    "total_fee",
    "total_fee_withdrew",
    "total_reward",
    "winner_jackpot_percent"
  ],
  "properties": {
    "admin": {
      "$ref": "#/definitions/CanonicalAddr"
    },
    "block_time_play": {
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "combination_len": {
      "type": "integer",
      "format": "uint8",
      "minimum": 0.0
    },
    "every_block_time_play": {
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "jackpot_percent": {
      "type": "integer",
      "format": "uint8",
      "minimum": 0.0
    },
    "lottery_counter": {
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "lottery_cw20_addr": {
      "$ref": "#/definitions/CanonicalAddr"
    },
    "lottery_worker_fee": {
      "type": "integer",
      "format": "uint8",
      "minimum": 0.0
    },
    "oracle_contract_addr": {
      "$ref": "#/definitions/CanonicalAddr"
    },
    "register_price": {
      "$ref": "#/definitions/Uint128"
    },
    "safe_lock": {
      "type": "boolean"
    },
    "total_collect": {
      "$ref": "#/definitions/Uint128"
    },
    "total_fee": {
      "$ref": "#/definitions/Uint128"
    },
    "total_fee_withdrew": {
      "$ref": "#/definitions/Uint128"
    },
    "total_reward": {
      "$ref": "#/definitions/Uint128"
    },
    "winner_jackpot_percent": {
      "type": "array",
      "items": {
        "type": "integer",
        "format": "uint8",
        "minimum": 0.0
      }
    }
  },
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "CanonicalAddr": {
      "$ref": "#/definitions/Binary"
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
