{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "description": "Collect jackpot",
      "type": "object",
      "required": [
        "collect"
      ],
      "properties": {
        "collect": {
          "type": "object",
          "properties": {
            "address": {
              "type": [
                "string",
                "null"
              ]
            },
            "round": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Run a lottery",
      "type": "object",
      "required": [
        "lottery"
      ],
      "properties": {
        "lottery": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Admin Security owner can switch on off to prevent exploit",
      "type": "object",
      "required": [
        "safe_lock"
      ],
      "properties": {
        "safe_lock": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Admin renounce and restore contract address to admin for full decentralization",
      "type": "object",
      "required": [
        "renounce"
      ],
      "properties": {
        "renounce": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "receive"
      ],
      "properties": {
        "receive": {
          "$ref": "#/definitions/Cw20ReceiveMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "set_config"
      ],
      "properties": {
        "set_config": {
          "type": "object",
          "required": [
            "block_time_play",
            "every_block_time_play",
            "lottery_worker_fee",
            "rand_contract_address",
            "rank_percent"
          ],
          "properties": {
            "block_time_play": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "every_block_time_play": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "lottery_worker_fee": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            },
            "rand_contract_address": {
              "type": "string"
            },
            "rank_percent": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Admin withdraw fee",
      "type": "object",
      "required": [
        "withdraw_fee"
      ],
      "properties": {
        "withdraw_fee": {
          "type": "object",
          "required": [
            "recipient"
          ],
          "properties": {
            "recipient": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "Cw20ReceiveMsg": {
      "description": "Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
      "type": "object",
      "required": [
        "amount",
        "msg",
        "sender"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "msg": {
          "$ref": "#/definitions/Binary"
        },
        "sender": {
          "type": "string"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
